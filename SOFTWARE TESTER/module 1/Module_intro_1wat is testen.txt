***Module 1: Software testen***

Wat is Software Testen? Definitie, Basis & types.

Software Testen is een methode om te controleren of het daadwerkelijke softwareproduct overeenkomt met de 
verwachte vereisten en om ervoor te zorgen dat het softwareproduct defect vrij is. 
Het omvat de uitvoering van software / systeemcomponenten met behulp van handmatige of geautomatiseerde tools om één ​​of 
meer van belang zijnde eigenschappen te evalueren. Het doel van software tests is om fouten, 
hiaten of ontbrekende vereisten te identificeren in tegenstelling tot daadwerkelijke vereisten.
Sommigen zeggen liever dat softwaretesten White Box en Black Box Testen zijn. 
Simpel gezegd betekent software test de verificatie van de applicatie wat getest dient te worden. (Application Under Test*AUT). 

In dit handboek gaan we een introductie doen op testen waarbij we het volgende leren en antwoord kunnen geven op het volgende: 

Wat is testen?
Waarom is testen belangrijk?
Wat is de toegevoegde waarde van testen?
Wie voert de testen uit?
Welke Test types zijn er?
Wat is testen in software 
engineering?

*** 1 Wat is Testen??

In de IT industrie zijn er 2 certificaten die jou als officiële gecertificeerde tester zullen maken. 
Namelijk TMAP en ISTQB. We gaan eerst ons verdiepen in een paar elementen van TMap en daarna ISTQB.

TMAP is een acroniem voor Test Management Approach. Het is een methode voor het testen van softwaresystemen 
op gestructureerde en waar mogelijk geautomatiseerde wijze, die zich meer richt in Nederland. 


Opdracht 1: 
Zoek op en geef antwoord op de volgende vragen:
Wat is de geschiedenis van TMAP?
Wat is de kracht van TMAP?
Wat biedt TMAP?
Waarbij helpt TMAP?

Bespreek de uitkomsten met je groep en eventuele bronnen.

1. Wat is de geschiedenis van TMAP?
Test Management Approach, gewoonlijk kortweg TMAP genoemd, is een testmethode voor software die ontwikkeld is door de 
Nederlandse tak van het IT-bedrijf Sogeti door Martin Pol, Ruud Teunissen en Erik van Veenendaal. De eerste versie werd geintroduceerd in 1995, 
eind 2006 werd een nieuwe versie geintroduceerd: Tmap next. Tmap is eigendom van het Nederlandse tak van het IT bedrijf Sogeti, onderdeel van Capgemini.

2. Wat is de kracht van TMAP?
TMAP is een breed en uitgebreid proces. De basis voor deze aanpak voor software testing worden in vier essenties uitgelegd.

De 4 essenties van TMAP:
- TMAP is gebaseerd op Business Driven Test Managment aanpak.
- TMAP beschrijft een gestructureerd test proces.
- TMAP bevat een complete gereedschapskist.
- TMAP is een adaptive/aangepaste methode.

3. Wat biedt TMAP?
TMAP biedt bedrijven een proces georienteerde test aanpak met de nadruk op business objectives.
De op structuur gebaseerde aanpak voor software biedt een aantal voordelen op:

- Extensieve//uitvoerig/grondig inzicht op risico's door software kwaliteit.
- Transparante test proces.
- Overzichtelijk in termen van tijd, kosten en kwaliteit.
- Geeft waarschuwingen in gevallen van slechte kwaliteit.
- Korte testperiode.
- Consequente/consistent standaardisatie/opleggen van een bepaalde norm.

4. Waarbij helpt TMAP?
TMAP/ Test Management Approach is een leidende aanpak binnen het testen van Software.
Deze gestructureerde Test Management Approach kan helpen in het sneller leveren van complexe en hoge kwaliteits niveau Software.
Doormiddel van deze structuur laat het bedrijven toe om geld en tijd te besparen. TMAP biedt een toolbox voor het instellen en 
uitvoeren van testen in combinatie met handleidingen en instructies. Het aanpak van gestructeerd testen bestaat uit vier verschillende
essentiele componenten. Het time-tested methode is gebaseerd op de onderzoen van Sogeti en onderzoken naar gebruikers ervaring. 
De flexibele aanpak maakt het interessante keuze voor verschillende bedrijven, organisaties en industrieen. 
Vele grote bedrijven maken gebruik van het TMAP als een standaard test aanpak.

Vragen voor de groep:
- What do you think? Are you familiar with the explanation of TMap?
- Test Management approach? What do you believe are pros and cons of this approach? 
- Do you have any tips or additional comments?

Bronnen:
https://www.toolshero.com/information-technology/tmap-test-management-approach
https://nl.wikipedia.org/wiki/Test_Management_Approach


Opdracht 2A:
Wat is de definitie van testen?
'Testen' kan worden gedefinieerd als:
- Een verzameling activiteiten die uitgevoerd wordt om een of meer kenmerken van een product, proces of dienst vast te stellen volgens een gespecificeerde procedure. 
  [ISO/ IEC, 1991]
- Een proces dat inzicht geeft in, en adviseert over, de kwaliteit van de software en de daaraan gerelateerde risico's.
- Het methodische proces van het aantonen van afwijkingen tussen de werkelijke werking versus de verwachte werking van een systeem of product.
- De activiteit waarbij de kwaliteit van het gehele systeem of product wordt gecontroleerd.
- Het proces waarmee de correcte werking van een systeem of product wordt aangetoond.
- Activiteiten zoals meten, onderzoeken, beproeven, keuren met kalibers van één of meer kenmerken van een product of dienst en het vergelijken van de 
  uitkomsten met de gestelde eisen, 
- om te bepalen of aan deze voorwaarde is voldaan. (Definitie volgens de standaard ISO 8402.)

TMAP en ISTQB test definities:
- Eerste TMAP boek uit 1995 geeft de volgende definitie: 
 ‘Testen is het proces van plannen, voorbereiden en meten, dat tot doel heeft de kenmerken van een informatiesysteem vast te 
 stellen en het verschil tussen de actuele en de vereiste status aan te tonen.’

- Twee nieuwe definities in 2006 TMap NEXT en van ISTQB:
 ‘Testen is een proces dat inzicht geeft in – en adviseert over de kwaliteit en de daaraan gerelateerde risico’s.’ 

- ISTQB publiceerde ongeveer in 2007 de volgende definitie die tot op de dag van vandaag ongewijzigd is gebleven: 
  ‘The process consisting of all lifecycle activities, both static and dynamic, concerned with planning, preparation and evaluation of software products and 
  related work products to determine that they satisfy specified requirements, to demonstrate that they are fit for purpose and to detect defects.‘

- Maart 2020 is het nieuwste boek uit de TMAP reeks uitgekomen, Quality for DevOps teams, waarin de nieuwste definitie staat: 
  ‘Testing consists of verification, validation and exploration activities that provide information about the quality and the related risks, 
  to establish the level of confidence that a test object will be able to deliver the pursued business value.‘

Bronnen:
https://nl.wikipedia.org/wiki/Testen_(software)
https://nieuws.testnet.org/artikelen/de-geschiedenis-van-de-definitie-van-testen/
https://www.toets-je-parate-kennis-over.nl/software-testen/


Opdracht 2B:
Wat is het verschil tussen Testen en Toetsen?
Testen en toetsen zijn detectieve kwaliteitsmaatregelen die er op gericht zijn vast te stellen of bepaalde problemen of tekortkomingen zich (toch) manifesteren. 
Waarbij toetsen het beoordelen van tussenproducten tijdens het ontwikkelingsproces is. Testen is het aantonen of het opgeleverde 
product voldoet aan de gestelde specificaties.


Opdracht 3:
Wat zijn eventuele valkuilen die je in de praktijk kan tegenkomen?

- Ontbreken van kennis om gestructureerd te kunnen testen;
  er worden geen testcases gemaakt;
  er wordt niet gewerkt via vast protocollen;
  hierdoor kost het testwerk waarschijnlijk onnodig veel tijd;
  dus loopt men het gevaar bepaalde onderdelen niet te testen en andere juist dubbel.

- Geen rekening houden met testenwerkzaamheden in het budget en daarom voor onverwachte verrassingen komen te staan;

- Het feit dat het effect van testen pas later merkbaar is. Op het moment dat de applicatie in gebruik genomen wordt en deze op de pijnbank komt te liggen wordt 
  het effect van testen merkbaar;

- Tunnelvisie van de ontwikkelaar. Iedereen test zijn eigen gebied, echter niemand test de samenhang van de onderdelen;

- Te beperkt testen. Vaak wordt testen beperkt tot het klikken op knopjes en kijken of het geen blauwe schermen oplevert. 
  Dit gebeurd vaak ongestructureerd en uitgevoerd wordt door personen die niet zijn opgeleid als professioneel tester;
  
- Onderschatten van het belang van testen. Met de gedachte ‘de ontwikkelaars doen hun werk vast wel goed’, wordt testen vaak overbodig geacht.

- Je werkt steeds onder tijdsdruk:
  Niet weten wanneer iets af moet zijn en hoeveel tijd je mag besteden door het ontbreken van een planning en begroting,
  Niet weten of je de juiste werkwijze hanteert door het ontbreken van een beschreven aanpak,
  Onnodig tijd besteden aan bijvoorbeeld het afhandelen van bevindingen door het ontbreken van procedures.

- Geen inzicht in de kwaliteit van het informatiesysteem:
  Je hebt geen inzicht in de risico’s, door het ontbreken van een teststrategie en procedures,
  Je kunt niet inschatten of de juiste dingen zijn getest met de gewenste diepgang, door het ontbreken van een teststrategie,
  Door het niet gebruiken van testontwerptechnieken kun je niet aantonen wat je hebt getest.

- Inefficiënt en ineffectief door:
  Je hebt niet het juiste getest, door het ontbreken van afstemming tussen betrokken partijen,
  Je test regelmatig op de verkeerde versie van de software, door het ontbreken van processen voor configuratie- en wijzigingsbeheer,
  Je weet niet in welke volgorde je moet testen, door het ontbreken van prioriteiten.

Bronnen:
https://blog.technosoft.nl/qa-testing/de-voordelen-van-testen-in-de-praktijk
https://www.toets-je-parate-kennis-over.nl/software-testen/kennisbank/software-testen/



***Extra info.
Voor- en nadelen geautomatiseerd testen:

Een doordachte strategie voor geautomatiseerd testen vraagt inzicht in de mogelijkheden en onmogelijkheden en de valkuilen. Want “A fool with a tool is still a fool”!
En die éne vergeten valkuil kan je een hoop ellende bezorgen. En dat éne vergeten voordeel kan maken dat je jouw goede plan niet verkocht krijgt aan de beslissers in 
je organisatie.
Daarom ga ik nu álle mogelijke voor- en nadelen die we in de SmarTEST praktijk ervaren of die ik van anderen heb opgepikt met je doornemen. 
Ik heb het kaf van het koren gescheiden en ze snijden allemaal hout. Maar, uiteraard praten we niet over absolute waarheden. 
Spreekt een voor- of nadeel je niet aan of is het in jouw situatie niet relevant? Laat hem dan vooral rusten!

1. Het is snel - snellere feedback, hogere ‘velocity', testen minder op het kritieke pad.
2. Je kunt meer en vaker testen - de hogere snelheid maakt frequenter testen mogelijk.
3. Het maakt vollediger (regressie)testen mogelijk - met een betere dekkingsgraad en daardoor minder kans op productieverstoringen.
4. Die snelheid en volledigheid maakt je IT-delivery meer agile en meer wendbaar.
5. Het is goedkoper – je kosten zijn lager door onder andere minder menskracht voor de uitvoering. Daar moet ik wel bij zeggen dat snelle besparingen op korte termijn 
   zeldzaam zijn: de kost gaat voor de baat uit. Zelfs op lange termijn zijn de directe kosten niet altijd lager dan bij handmatig testen. De winst zit dan in andere 
   voordelen die zich uiteindelijk ook weer naar geld laten vertalen, zoals wendbaarheid, kwaliteit en volledigheid. 
   Op termijn moeten de investeringen -direct of indirect-winstgevend zijn, anders moet je er niet aan beginnen.
6. Het is een Brainsaver – want het routinewerk wordt je uit handen genomen en je houdt meer tijd over voor exploratieve, intelligente en creatieve testen,
7. Het is Betrouwbaar -  want minder foutgevoelig, de tool doet precies wat je zegt, telkens opnieuw
8. Je maakt het Herhaalbaar - want je doet elke keer exact hetzelfde en ‘bugs’ zijn makkelijker te reproduceren
9. Het is Veelzijdig – het maakt namelijk testen mogelijk die handmatig niet lukken omdat het te snel gaat of omdat er geen handmatige MMI interface is.
10.Het is Nauwkeurig - maakt nauwkeuriger meten mogelijk, bijvoorbeeld van responstijden
11.Alles wordt Traceerbaar - aantoonbaarheid en compliancy, achteraf is altijd traceerbaar wat precies is getest
12.Het is leuk en Motiverend - meer uitdaging en motivatie voor de medewerkers; minder saai handmatig werk
13.Het bespaart ook op andere manieren tijd - de gebruikte tools zijn ook handig voor het snel invoeren van grote hoeveelheden consistente (test)data via de schermen, 
   dus mét invoervalidaties.
14.Je nut je omgevingen beter - uit  testen draaien ‘s nachts of zelfs 24x7.
15.Het ondersteunt Visualisatie - ondersteunt een continue visuele kwaliteitsindicatie van de software, zichtbaar voor iedereen in de organisatie, bijvoorbeeld via 
   dashboards op de gangen.
16.Het Brengt structuur - brengt rust, reinheid en regelmaat, want geautomatiseerd testen kan niet zonder een gestructureerd proces met stabiele omgevingen en schone testdata 
   (maar ‘elk voordeel heb z’n nadeel’, zie de eerste bullet in het rijtje nadelen).
17.Het draagt bij aan een soepel het build proces – GT is een onmisbare schakel in een geautomatiseerd build proces, continuous integration en in ‘test first’ 
   softwareontwikkeling, TDD.
18.Performance testen kunnen niet zonder- maakt langdurig of zelfs continu testen met hoge en/of wisselende belastingen mogelijk 
   (performance, load, stress, piek, soak, endurance, reliability testen).

 
Nadelen automatisch testen:
1. Het is een softwareproject erbij! - Het is een complex geheel van scripts, parameters, data en besturingslogica. Dat alles maken en onderhouden kost 
   tijd en geld en is onderhoudsintensief. Dat dit bij ‘test first’ aanpakken minder van toepassing is hebben we overigens al gezien.
2. Je bent Afhankelijk - van structuur, stabiele omgevingen en consistente testdata is groot. Alles moet exact kloppen, terwijl dat handmatig niet hoedt.
3. Tools zijn Dom - geautomatiseerd testen is meer ‘checken’ dan testen en ontbeert de creativiteit en de flexibiliteit van de menselijke tester.
4. Het kost tijd en geld –afgezien van dure uren van dure specialisten zijn veel tools evenmin gratis en kosten selectie- en inkoopprocedures ook tijd en energie. 
   Als je het goed doet verdien je dat allemaal ruimschoots terug, maar het initiele budget moet er wel zijn.
5. Het is Complex - de tools brengen hun eigen complexiteit mee, vergen opleiding en beheer.
6. Het heeft zijn beperkingen - niet alle testen kunnen worden geautomatiseerd, de tools hebben hun beperkingen
7. De analyse van de ‘fails’ in runverslagen kan tijdrovend   zijn, met name als je dekkingsgraad groter en fijnmaziger wordt en de tool veel onterechte fouten rapporteert
8. Tools kunnen beveiligingsrisico’s introduceren. Denk aan lekken, kwetsbaarheden bijvoorbeeld door poorten open te zetten en te linken naar mogelijk riskante cloud services
9. Het gaat ten koste van het kritische testoog creativiteit wordt gestopt in tool-technische uitdagingen en niet meer in kritisch testontwerp. 
   Ik denk hierbij aan testgoeroe Michael Bolton die de wereld afreist met zijn workshop ‘critical thinking for testers’.
10.Wat dacht je van Minder draagvlak: Handmatig testen brengt draagvlak, betrokkenheid en kennis bij de (gebruikers)testers en dat wordt minder bij geautomatiseerd testen
11.En een hele gevaarlijke: Schijnzekerheid - het vertrouwen in de uitkomsten van geautomatiseerde testruns is vaak groot, maar dekking en kwaliteit van een geautomatiseerde 
  testset zijn niet meer waard dan wat de bouwers erin gestopt hebben. 
12.Samenvattend: geautomatiseerd testen stelt hoge eisen en vergt een behoorlijk kennisniveau en volwassenheid van de organisatie.

Bronnen:
http://www.smartest.nl/smartest/podcast_geautomatiseerd_testen/deel_3__alle_voor_en_nadelen
http://www.smartest.nl/smartest/wat1is1smart1testen




