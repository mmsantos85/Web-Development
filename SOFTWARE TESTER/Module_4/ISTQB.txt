***ISTQB Foundation***

ISTQB oftewel ‘International Software Testing Qualifications Board’ is de board waar je gecertificeerd kan worden als tester. 
ISTQB focust zich op internationale standaarden terwijl TMap zich meer focust binnen Nederland.

Aankomend week richten we op de Agile Tester van de ISTQB. In de volgende link word je al geleid naar de juiste pad naar tester. 
Leerdoelen:
- De fundamentals van agile software development
- Verschillende agile methodieken
- De verschillen tussen testen op traditionele en agile manier.
- Testen in agile projecten
- Rollen en vaardigheden van een tester in agile.
- Agile testtechnieken
- Product Kwaliteit vast kunnen stellen in agile projecten
- Test zwaarte bepalen om uit te voeren testen te definiëren.
- Tools in agile projecten.
- https://www.istqb.org/downloads/send/2-foundation-level-documents/281-istqb-ctfl-syllabus-2018-v3-1.html


Lees de Syllabus en beantwoord de volgende vragen.

Opdracht 1: Wat zijn de Agile methodes?
There are certain testing practices that can be followed in every development project (agile or not) to produce quality products. 
These include writing tests in advance to express proper behavior, focusing on early defect prevention, detection, and removal, 
and ensuring that the right test types are run at the right time and as part of the right test level. 
Agile practitioners aim to introduce these practices early. Testers in Agile projects play a key role in guiding the use of these testing 
practices throughout the lifecycle.

Test-driven development, acceptance test-driven development, and behavior-driven development are three complementary techniques in use among 
Agile teams to carry out testing across the various test levels. Each technique is an example of a fundamental principle of testing, 
the benefit of early testing and QA activities, since the tests are defined before the code is written. 

Test-Driven Development:
Test-driven development (TDD) is used to develop code guided by automated test cases. The process
for test-driven development is:
- Add a test that captures the programmer’s concept of the desired functioning of a small piece of code.
- Run the test, which should fail since the code doesn’t exist.
- Write the code and run the test in a tight loop until the test passes.
- Refactor the code after the test is passed, re-running the test to ensure it continues to pass against the refactored code.
- Repeat this process for the next small piece of code, running the previous tests as well as the added tests.

Acceptance Test-Driven Development:
Acceptance test-driven development [Adzic09] defines acceptance criteria and tests during the
creation of user stories (see Section 1.2.2). Acceptance test-driven development is a collaborative
approach that allows every stakeholder to understand how the software component has to behave and
what the developers, testers, and business representatives need to ensure this behavior. The process
of acceptance test-driven development is explained in Section 3.3.2.
Acceptance test-driven development creates reusable tests for regression testing. Specific tools
support creation and execution of such tests, often within the continuous integration process. These
tools can connect to data and service layers of the application, which allows tests to be executed at
the system or acceptance level. Acceptance test-driven development allows quick resolution of
defects and validation of feature behavior. It helps determine if the acceptance criteria are met for the
feature.

Behavior-Driven Development:
Behavior-driven development [Chelimsky10] allows a developer to focus on testing the code based on
the expected behavior of the software. Because the tests are based on the exhibited behavior of the
software, the tests are generally easier for other team members and stakeholders to understand.

Specific behavior-driven development frameworks can be used to define acceptance criteria based on
- the given/when/then format:
-Given some initial context,
-When an event occurs,
- Then ensure some outcomes.

From these requirements, the behavior-driven development framework generates code that can be
used by developers to create test cases. Behavior-driven development helps the developer
collaborate with other stakeholders, including testers, to define accurate unit tests focused on
business needs.

Bronnen:
https://www.istqb.org/downloads/send/5-foundation-level-agile-tester/41-agile-tester-extension-syllabus.html


Opdracht 2: Hoe maak je een risico- analyse?

Opdracht 3: Hoe wordt dan een teststrategie bepaald? Denk aan hoe zwaar er getest moet worden.

Opdracht 4: Welke technieken zijn er en geef hier een korte beschrijving van de technieken.


Opdracht 5: Welke tools zijn er die een tester zouden helpen?

*Task Management and Tracking Tools: 
In some cases, Agile teams use physical story/task boards (e.g., whiteboard, corkboard) to manage and track user stories, tests, and other tasks throughout each sprint. 
Other teams will use applicationlifecycle management and task management software, including electronic task boards. 
These tools serve the following purposes:
- Record stories and their relevant development and test tasks, to ensure that nothing gets lost during a sprint,
- Capture team members’ estimates on their tasks and automatically calculate the effort required to implement a story, to support efficient iteration planning sessions
- Associate development tasks and test tasks with the same story, to provide a complete picture of the team’s effort required to implement the story
- Aggregate developer and tester updates to the task status as they complete their work, automatically providing a current calculated snapshot of the status of each story, 
  the iteration, and the overall release.
- Provide a visual representation (via metrics, charts, and dashboards) of the current state of each user story, the iteration, and the release, allowing all stakeholders,
  including people on geographically distributed teams, to quickly check status,
- Integrate with configuration management tools, which can allow automated recording of code check-ins and builds against tasks, and, in some cases, 
  automated status updates for tasks.

*Communication and Information Sharing Tools:
In addition to e-mail, documents, and verbal communication, Agile teams often use three additional types of tools to support communication and information sharing: 
wikis, instant messaging, and desktop sharing.

Wikis allow teams to build and share an online knowledge base on various aspects of the project,
including the following:
- Product feature diagrams, feature discussions, prototype diagrams, photos of whiteboard discussions, and other information,
- Tools and/or techniques for developing and testing found to be useful by other members of the team,
- Metrics, charts, and dashboards on product status, which is especially useful when the wiki is integrated with other tools such as the build server and task management system, 
  since the tool can update product status automatically.
- Conversations between team members, similar to instant messaging and email, but in a way that is shared with everyone else on the team.

Instant messaging, audio teleconferencing, and video chat tools provide the following benefits:
- Allow real time direct communication between team members, especially distributed teams
- Involve distributed teams in standup meetings
- Reduce telephone bills by use of voice-over-IP technology, removing cost constraints that could reduce team member communication in distributed settings.

Desktop sharing and capturing tools provide the following benefits:
- In distributed teams, product demonstrations, code reviews, and even pairing can occur
- Capturing product demonstrations at the end of each iteration, which can be posted to the team’s wiki.

These tools should be used to complement and extend, not replace, face-to-face communication in
Agile teams.

*Software Build and Distribution Tools:
As discussed earlier in this syllabus, daily build and deployment of software is a key practice in Agile
teams. This requires the use of continuous integration tools and build distribution tools. 

*Configuration Management Tools:
On Agile teams, configuration management tools may be used not only to store source code and
automated tests, but manual tests and other test work products are often stored in the same repository
as the product source code. This provides traceability between which versions of the software were
tested with which particular versions of the tests, and allows for rapid change without losing historical
information. The main types of version control systems include centralized source control systems
and distributed version control systems. The team size, structure, location, and requirements to
integrate with other tools will determine which version control system is right for a particular Agile
project.

Bronnen:







Goed nu heb je een basis waarmee je mogelijk de proefexamen kan doen op:
https://www.istqb.org/certification-path-root/foundation-level-2018.html
Advies luidt: Lees de Syllabus nogmaals door voordat je de proefexamen gaat doen. En de belangrijke onderwerpen van TMap.

