***ISTQB Foundation***

ISTQB oftewel ‘International Software Testing Qualifications Board’ is de board waar je gecertificeerd kan worden als tester. 
ISTQB focust zich op internationale standaarden terwijl TMap zich meer focust binnen Nederland.

The International Software Testing Qualifications Board (ISTQB) is a software testing certification board that operates internationally. 
Founded in Edinburgh in November 2002, the ISTQB is a non-profit association legally registered in Belgium.

Aankomend week richten we op de Agile Tester van de ISTQB. In de volgende link word je al geleid naar de juiste pad naar tester. 
Leerdoelen:
- De fundamentals van agile software development
- Verschillende agile methodieken
- De verschillen tussen testen op traditionele en agile manier.
- Testen in agile projecten
- Rollen en vaardigheden van een tester in agile.
- Agile testtechnieken
- Product Kwaliteit vast kunnen stellen in agile projecten
- Test zwaarte bepalen om uit te voeren testen te definiëren.
- Tools in agile projecten.
- https://www.istqb.org/downloads/send/2-foundation-level-documents/281-istqb-ctfl-syllabus-2018-v3-1.html


Lees de Syllabus en beantwoord de volgende vragen.

Opdracht 1: Wat zijn de Agile methodes?

There are certain testing practices that can be followed in every development project (agile or not) to produce quality products. 
These include writing tests in advance to express proper behavior, focusing on early defect prevention, detection, and removal, 
and ensuring that the right test types are run at the right time and as part of the right test level. 
Agile practitioners aim to introduce these practices early. Testers in Agile projects play a key role in guiding the use of these testing 
practices throughout the lifecycle.

Test-driven development, acceptance test-driven development, and behavior-driven development are three complementary techniques in use among 
Agile teams to carry out testing across the various test levels. Each technique is an example of a fundamental principle of testing, 
the benefit of early testing and QA activities, since the tests are defined before the code is written. 

Test-Driven Development:
Test-driven development (TDD) is used to develop code guided by automated test cases. The process
for test-driven development is:
- Add a test that captures the programmer’s concept of the desired functioning of a small piece of code.
- Run the test, which should fail since the code doesn’t exist.
- Write the code and run the test in a tight loop until the test passes.
- Refactor the code after the test is passed, re-running the test to ensure it continues to pass against the refactored code.
- Repeat this process for the next small piece of code, running the previous tests as well as the added tests.

Acceptance Test-Driven Development:
Acceptance test-driven development [Adzic09] defines acceptance criteria and tests during the creation of user stories (see Section 1.2.2). 
Acceptance test-driven development is a collaborative approach that allows every stakeholder to understand how the software component has to behave 
and what the developers, testers, and business representatives need to ensure this behavior. The process of acceptance test-driven development is explained in Section 3.3.2.
Acceptance test-driven development creates reusable tests for regression testing. Specific tools support creation and execution of such tests, 
often within the continuous integration process. These tools can connect to data and service layers of the application, which allows tests to be executed at
the system or acceptance level. Acceptance test-driven development allows quick resolution of defects and validation of feature behavior. 
It helps determine if the acceptance criteria are met for the feature.

Behavior-Driven Development:
Behavior-driven development [Chelimsky10] allows a developer to focus on testing the code based on
the expected behavior of the software. Because the tests are based on the exhibited behavior of the
software, the tests are generally easier for other team members and stakeholders to understand.

Specific behavior-driven development frameworks can be used to define acceptance criteria based on the given/when/then format:
- Given some initial context,
- When an event occurs,
- Then ensure some outcomes.

From these requirements, the behavior-driven development framework generates code that can be used by developers to create test cases. 
Behavior-driven development helps the developer collaborate with other stakeholders, including testers, to define accurate unit tests focused on
business needs.

Bronnen:
https://www.istqb.org/downloads/send/5-foundation-level-agile-tester/41-agile-tester-extension-syllabus.html


Opdracht 2: Hoe maak je een risico- analyse?
Risk is used to focus the effort required during testing. It is used to decide where and when to start testing and to identify areas that need more attention. 
Testing is used to reduce the probability of an adverse event occurring, or to reduce the impact of an adverse event. Testing is used as a risk mitigation activity,
to provide information about identified risks, as well as providing information on residual (unresolved) risks.
A risk-based approach to testing provides proactive opportunities to reduce the levels of product risk. It involves product risk analysis, which includes the identification 
of product risks and the assessment of each risk’s likelihood and impact. The resulting product risk information is used to guide test planning, 
the specification, preparation and execution of test cases, and test monitoring and control. Analyzing product risks early contributes to the success of a project. 

In a risk-based approach, the results of product risk analysis are used to: 
- Determine the test techniques to be employed,
- Determine the particular levels and types of testing to be performed (e.g., security testing,
accessibility testing),
- Determine the extent of testing to be carried out,
- Prioritize testing in an attempt to find the critical defects as early as possible,
- Determine whether any activities in addition to testing could be employed to reduce risk (e.g., providing training to inexperienced designers).

Risk-based testing draws on the collective knowledge and insight of the project stakeholders to carry out product risk analysis. 
To ensure that the likelihood of a product failure is minimized, risk management activities provide a disciplined approach to:
- Analyze (and re-evaluate on a regular basis) what can go wrong (risks),
- Determine which risks are important to deal with,
- Implement actions to mitigate those risks,
- Make contingency plans to deal with the risks should they become actual events.

In addition, testing may identify new risks, help to determine what risks should be mitigated, and lower uncertainty about risks. 

Bronnen:
ISTQB pagina's: 
risk 73–75
definition 73
product see product risk
project see project risk
risk analysis 16, 19, 34–35, 37, 62, 67, 74
risk-based testing 62, 66–67, 74
test automation risks 79-81


Opdracht 3: Hoe wordt dan een teststrategie bepaald? Denk aan hoe zwaar er getest moet worden.
A test strategy provides a generalized description of the test process, usually at the product or organizational level. Common types of test strategies include: 

- Analytical: 
  This type of test strategy is based on an analysis of some factor (e.g., requirement or risk). Risk-based testing is an example of an analytical approach, 
  where tests are designed and prioritized based on the level of risk.
- Model-Based: 
  In this type of test strategy, tests are designed based on some model of some required aspect of the product, such as a function, a business process, 
  an internal structure, or a non-functional characteristic (e.g., reliability). Examples of such models include business process models, state models, and reliability growth models.
- Methodical: 
  This type of test strategy relies on making systematic use of some predefined set of tests or test conditions, such as a taxonomy of common or likely types of failures, 
  a list of important quality characteristics, or company-wide look-and-feel standards for mobile apps or web pages.
- Process-compliant (or standard-compliant): 
  This type of test strategy involves analyzing, designing, and implementing tests based on external rules and standards, such as those specified by industry-specific standards, 
  by process documentation, by the rigorous identification and use of the test basis, or by any process or standard imposed on or by the organization.
- Directed (or consultative): 
  This type of test strategy is driven primarily by the advice, guidance, or instructions of stakeholders, business domain experts, or technology experts, 
  who may be outside the test team or outside the organization itself.
- Regression-averse: 
  This type of test strategy is motivated by a desire to avoid regression of existing capabilities. This test strategy includes reuse of existing testware (especially test cases
  and test data), extensive automation of regression tests, and standard test suites.

An appropriate test strategy is often created by combining several of these types of test strategies. For example, risk-based testing (an analytical strategy) can be combined with 
exploratory testing (a reactive strategy); they complement each other and may achieve more effective testing when used together. 

While the test strategy provides a generalized description of the test process, the test approach tailors the test strategy for a particular project or release. 
The test approach is the starting point for selecting the test techniques, test levels, and test types, and for defining the entry criteria and exit criteria 
(or definition of ready and definition of done, respectively). The tailoring of the strategy is based on decisions made in relation to the complexity and goals of the project, 
the type of product being developed, and product risk analysis. The selected approach depends on the context and may consider factors such as risks, safety,
available resources and skills, technology, the nature of the system (e.g., custom-built versus COTS), test objectives, and regulations.

Bronnen:
ISTQB pagina's: test strategy 17, 62, 64, 66–67


Opdracht 4: Welke technieken zijn er en geef hier een korte beschrijving van de technieken.
The purpose of a test technique, including those discussed in this section, is to help in identifying test conditions, test cases, and test data.

The choice of which test techniques to use depends on a number of factors, including: 
- Component or system complexity,
- Regulatory standards, 
- Customer or contractual requirements,
- Risk levels and types, 
- Available documentation,
- Tester knowledge and skills, 
- Available tools,
- Time and budget,
- Software development lifecycle model,
- The types of defects expected in the component or system.

Black-box technique:
Black-box test techniques (also called behavioral or behavior-based techniques) are based on an analysis of the appropriate test basis (e.g., formal requirements documents, 
specifications, use cases, user stories, or business processes). These techniques are applicable to both functional and nonfunctional testing. 
Black-box test techniques concentrate on the inputs and outputs of the test object without reference to its internal structure.

Common characteristics of black-box test techniques include the following: 
- Test conditions, test cases, and test data are derived from a test basis that may include software requirements, specifications, use cases, and user stories.
- Test cases may be used to detect gaps between the requirements and the implementation of the requirements, as well as deviations from the requirements.
- Coverage is measured based on the items tested in the test basis and the technique applied to the test basis.

White-box technique:
White-box test techniques (also called structural or structure-based techniques) are based on an analysis of the architecture, detailed design, internal structure, 
or the code of the test object. Unlike black-box test techniques, white-box test techniques concentrate on the structure and processing within the test object.

Common characteristics of white-box test techniques include:
- Test conditions, test cases, and test data are derived from a test basis that may include code, software architecture, detailed design, or any other source of information 
  regarding the structure of the software.
- Coverage is measured based on the items tested within a selected structure (e.g., the code or interfaces) and the technique applied to the test basis.

Experienced-based techniques:
Experience-based test techniques leverage the experience of developers, testers and users to design, implement, and execute tests. These techniques are often combined 
with black-box and white-box test techniques. 

Common characteristics of experience-based test techniques include:
- Test conditions, test cases, and test data are derived from a test basis that may include knowledge and experience of testers, developers, users and other stakeholders.

Bronnen:
ISTQB pagina:
test techniques 14, 16, 55–61, 67, 74
black-box 55, 57–60
categories 55, 56
choosing 55, 56-57
experience-based 55, 56, 61
white-box 40, 55, 56-57, 60


Opdracht 5: Welke tools zijn er die een tester zouden helpen?

*Task Management and Tracking Tools: 
In some cases, Agile teams use physical story/task boards (e.g., whiteboard, corkboard) to manage and track user stories, tests, and other tasks throughout each sprint. 
Other teams will use applicationlifecycle management and task management software, including electronic task boards. 
These tools serve the following purposes:
- Record stories and their relevant development and test tasks, to ensure that nothing gets lost during a sprint,
- Capture team members’ estimates on their tasks and automatically calculate the effort required to implement a story, to support efficient iteration planning sessions
- Associate development tasks and test tasks with the same story, to provide a complete picture of the team’s effort required to implement the story
- Aggregate developer and tester updates to the task status as they complete their work, automatically providing a current calculated snapshot of the status of each story, 
  the iteration, and the overall release.
- Provide a visual representation (via metrics, charts, and dashboards) of the current state of each user story, the iteration, and the release, allowing all stakeholders,
  including people on geographically distributed teams, to quickly check status,
- Integrate with configuration management tools, which can allow automated recording of code check-ins and builds against tasks, and, in some cases, 
  automated status updates for tasks.

*Communication and Information Sharing Tools:
In addition to e-mail, documents, and verbal communication, Agile teams often use three additional types of tools to support communication and information sharing: 
wikis, instant messaging, and desktop sharing.

Wikis allow teams to build and share an online knowledge base on various aspects of the project,
including the following:
- Product feature diagrams, feature discussions, prototype diagrams, photos of whiteboard discussions, and other information,
- Tools and/or techniques for developing and testing found to be useful by other members of the team,
- Metrics, charts, and dashboards on product status, which is especially useful when the wiki is integrated with other tools such as the build server and task management system, 
  since the tool can update product status automatically.
- Conversations between team members, similar to instant messaging and email, but in a way that is shared with everyone else on the team.

Instant messaging, audio teleconferencing, and video chat tools provide the following benefits:
- Allow real time direct communication between team members, especially distributed teams
- Involve distributed teams in standup meetings
- Reduce telephone bills by use of voice-over-IP technology, removing cost constraints that could reduce team member communication in distributed settings.

Desktop sharing and capturing tools provide the following benefits:
- In distributed teams, product demonstrations, code reviews, and even pairing can occur
- Capturing product demonstrations at the end of each iteration, which can be posted to the team’s wiki.

These tools should be used to complement and extend, not replace, face-to-face communication in
Agile teams.

*Software Build and Distribution Tools:
As discussed earlier in this syllabus, daily build and deployment of software is a key practice in Agile teams. 
This requires the use of continuous integration tools and build distribution tools. 

*Configuration Management Tools:
On Agile teams, configuration management tools may be used not only to store source code and automated tests, but manual tests and other test work products are 
often stored in the same repository as the product source code. This provides traceability between which versions of the software were
tested with which particular versions of the tests, and allows for rapid change without losing historical information. 
The main types of version control systems include centralized source control systems and distributed version control systems. The team size, structure, location, 
and requirements to integrate with other tools will determine which version control system is right for a particular Agile project.

Bronnen:
Pagina's ISTQB: 
test tools 20–24, 40, 44, 46, 50, 56, 65–66, 69,
73–74, 78–82


***Goed nu heb je een basis waarmee je mogelijk de proefexamen kan doen op:
https://www.istqb.org/certification-path-root/foundation-level-2018.html
Advies luidt: Lees de Syllabus nogmaals door voordat je de proefexamen gaat doen. En de belangrijke onderwerpen van TMap.

